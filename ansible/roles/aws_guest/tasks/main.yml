---
- name: Remove firewall and linux-firmware
  ansible.builtin.dnf:
    name:
      - firewalld
      - firewalld-filesystem
      - ipset
      - ipset-libs
      - iptables
      - python3-firewall
      - python3-slip
      - libnftnl
      - libnfnetlink
      - linux-firmware
    state: absent

- name: Find persistent-net.rules
  ansible.builtin.find:
    paths: /etc/udev/rules.d
    patterns: 70*
  register: net_rules

- name: Delete persistent-net.rules
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  with_items: "{{ net_rules.files }}"

- name: Configure /etc/sysconfig/network
  ansible.builtin.lineinfile:
    path: /etc/sysconfig/network
    line: "{{ item }}"
  with_items:
    - NETWORKING=yes
    - NOZEROCONF=yes

- name: Configure /etc/sysconfig/network-scripts/ifcfg-eth0
  ansible.builtin.copy:
    src: ifcfg-eth0
    dest: /etc/sysconfig/network-scripts/ifcfg-eth0
    owner: root
    group: root
    mode: '0644'

- name: Disable consistent network device naming
  ansible.builtin.file:
    src: /dev/null
    dest: /etc/udev/rules.d/80-net-name-slot.rules
    owner: root
    group: root
    state: link

- name: Blacklist nouveau kernel module
  ansible.builtin.lineinfile:
    path: /etc/modprobe.d/blacklist-nouveau.conf
    line: blacklist nouveau
    create: true
    owner: root
    group: root
    mode: 0644

- name: Disable firstboot
  ansible.builtin.lineinfile:
    path: /etc/sysconfig/firstboot
    line: RUN_FIRSTBOOT=NO
    create: true
    owner: root
    group: root
    mode: 0644

- name: Disable root login
  ansible.builtin.user:
    name: root
    password: '!!'

- name: Add Amazon Time Sync Service to chrony config
  ansible.builtin.lineinfile:
    path: /etc/chrony.conf
    line: "{{ item }}"
  with_items:
    - '# Amazon Time Sync Service'
    - 'server 169.254.169.123 prefer iburst'

- name: Disable virtual terminals allocation by logind
  ansible.builtin.replace:
    dest: '/etc/systemd/logind.conf'
    regexp: '^#?NAutoVTs=\d+'
    replace: 'NAutoVTs=0'

- name: Install additional software
  ansible.builtin.dnf:
    name:
      - cloud-init
      - cloud-utils-growpart
      - dracut-config-generic
      - gdisk
      - rsync
      - tar
      - qemu-guest-agent
      - yum-utils
    state: present

- name: Set up AWS Systems Manager Agent (SSM Agent)
  block:
    - name: Get the SSM Agent's Public key
      ansible.builtin.copy:
        src: amazon-ssm-agent.gpg
        dest: /tmp/amazon-ssm-agent.gpg
        owner: root
        group: root
        mode: '0644'

    - name: Import SSM Agent's Public Key
      ansible.builtin.rpm_key:
        state: present
        key: /tmp/amazon-ssm-agent.gpg

    - name: Install AWS Systems Manager Agent (SSM Agent)
      ansible.builtin.dnf:
        name: https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
        state: present

- name: Enable cloud-init services
  ansible.builtin.service:
    name: "{{ item }}"
    enabled: true
  with_items:
    - cloud-config
    - cloud-init
    - cloud-init-local
    - cloud-final

- name: Change cloud-init user to ec2-user
  ansible.builtin.replace:
    dest: /etc/cloud/cloud.cfg
    regexp: '^(\s+name:).*$'
    replace: '\1 ec2-user'

- name: Configure NetworkManager default DHCP timeout
  community.general.ini_file:
    path: /rootfs/etc/NetworkManager/conf.d/dhcp.conf
    section: connection
    option: ipv4.dhcp-timeout
    value: 300
    owner: root
    group: root
    mode: 0644
    seuser: system_u

- name: Enable sgdisk in dracut
  ansible.builtin.lineinfile:
    path: /etc/dracut.conf.d/sgdisk.conf
    line: 'install_items+=" sgdisk "'
    create: true
    owner: root
    group: root
    mode: 0644

- name: Enable xen drivers in dracut
  ansible.builtin.lineinfile:
    path: /etc/dracut.conf.d/xen.conf
    line: 'add_drivers+=" xen-netfront xen-blkfront "'
    create: true
    owner: root
    group: root
    mode: 0644

- name: Upgrade initramfs
  ansible.builtin.command: dracut -f --regenerate-all
  changed_when: treu
